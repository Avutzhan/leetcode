Динамическое программирование

Вы освоите динамическое программирование метод
решения сложных задач, разбиваемых на подзадачи,
которые решаются в первую очередь

Рассматриваются примеры, которые научат вас искать
решения новых задач, основанные на методе динами­
ческого программирования.

Задача о рюкзаке

В ернемся к задаче о рюкзаке из главы
8. У вас есть рюкзак, в кото р ом можн о унести тов ары
общим весом до 4 фунтов.

Есть три предмета, которые можно уложить в рюкзак.

Какие предметы следует положить в рюкзак, чтобы стоимость добычи была
максимальной?

Простое решение

Простой алгоритм выглядит так: вы перебираете все возможные множества
товаров и находите множество с максимальной стоимостью.

Такое решение работает, но очень медленно. Для 3 предметов приходится
обработать 8 возможных множеств, для 4 - 16 и т. д. С каждым добавляе­
мым предметом количество множеств удваивается! Этот алгоритм выпол­
няется за время 0(2^n), что очень, очень медленно.

Для любого сколько-нибудь значительного количества предметов это не­
приемлемо. В главе 8 вы видели, как вычисляются приближенные решения.
Такие решения близки к оптимальным, но могут не совпадать с ними.
Как же вычислить оптимальное решение?

Динамическое программирование
Ответ: с помощью динамического программирования! Давайте посмотрим,
как работает этот метод. Процедура начинается с решения подзадач с по­
степенным переходом к решению полной задачи.

В задаче о рюкзаке начать следует с реше­
ния задачи для меньшего рюкзака (или
~подрюкзака» ), а потом на этой основе
попытаться решить исходную задачу.

Динамическое программирование - до­
статочно сложная концепция; не огор­
чайтесь, если после первого прочтения
что-то останется непонятным. При­
меры помогут вам разобраться в теме.

Для начала я покажу вам алгоритм в действии . П осле этого у вас наверня ка
появится много вопросов ! Я постараюсь ответить на них .

Каждый алгоритм динамического программи рования начинается с табли­
цы . Вот как выглядит табли ца для задачи о р юкзаке .

стр 209

Строки табл ицы представляют предметы, а столбцы 1 до 4  -
емкость рюкзака от фунтов . Все эти стол бцы нужны, потому что они упро щают вычис­
л е ни е стоимостей «под рюкзаков » .

В исходном состоянии таблица пуста . Нам предстоит заполнить каждую
яче йку таблицы. После того как таблица будет зап ол н ена, вы получите от­
вет на свою задачу. Пожалуйста, внимательно разберитесь в происх одящем.
Нар исуйте собственную таблицу, а мы вместе ее заполним .

Строка Гитара

Точная форму л а для вычисления значений в таблице будет п р и в едена
позднее . а пока ограничимся общим описанием. Начнем с пе р вой строки .

Строка снабжена пометкой «гитара»; это означает, что вы пытаетесь уло­
жить гитару в рюкзак. В каждой ячейке принимается простое решение :
класть гитару в рюкзак или нет? Помните: мы пытаемся найти множество
элементов с максимальной стоимостью.

В первой ячейке емкость рюкзака равна 1 фунт  - 1 фунту. Гитара также весит
значит, она поместится в рюкзак! Итак, стоимость этой ячейки составляет $1500,
а в рюкзаке лежит гитара.

По тому же принципу каждая ячейка в таблице содержит список всех эле ­
ментов, которые помещаются в рюкзаке на данный момент.

Посмотрим на следующую ячейку. На этот раз емкость рюкзака составляет
2 фунта. Понятно , что гитара здесь поместится!

Процедура повторяется для остальных ячеек строки. Вспомните, что теку­
щей является первая строка, поэтому выбирать приходится только из одно­
го предмета - гитары. Считайте, что два других предмета пока недоступны .

Возможно, к этому моменту вы слегка сбиты с толку. Почему все это дела­
ется для рюкзаков с емкостью 1, 2 и т. д., если в задаче речь идет о рюкзаке
с емкостью 4 фунта?
Помните, что я говорил ранее? Метод динамического
программирования начинает с малых задач , а затем переходит к большой
задаче. Вы решаете подзадачи, которые помогут в решении большой задачи.
Читайте дальше, и ситуация постепенно прояснится.

После того как первая строка будет заполнена, таблица будет выглядеть так:

стр 211

Помните, что мы стремимся обеспечить максимальную стоимость пред­
метов в рюкзаке. Эта строка представляет текущую лучшую оценку мак­
симума. Итак, на данный момент из этой строки следует, что для рюкзака
с емкостью 4 фунта максимальная стоимость предметов составит  $1500.

Вы знаете, что это решение неокончательно. В процессе работы алгоритма
оценка будет уточняться.

Магнитофон

Займемся следующей строкой, которая относится к магнитофону. Теперь,
когда вы перешли ко второй строке, появляется выбор между магнито­
фоном и гитарой. В каждой строке можно взять предмет этой строки или
предметы, находящиеся в верхних строках. Таким образом , сейчас нельзя
выбрать ноутбук, но можно выбрать магнитофон и/или гитару. Нач нем
с первой ячейки (рюкзак с емкостью 1 фунт).
Текущая максимальная сто­имость предметов, которые можно положить в рюкзак с емкостью 1 фунт
составляет $1500.
,
Брать магнитофон или нет?
Емкость рюкзака составляет 1 фунт.
Поместится туда магнитофон? Нет, он
слишком тяжел! Так как магнитофон не помещается в рюкзак, максималь­
ная оценка для 1-фунтовоrо рюкзака остается равной
$1500.

стр 213

То же самое происходит со следующими двумя клетками. Емкость этих
рюкзаков составляет 2 и 3
фунта соответственно. Старая максимальная
стоимость для обеих ячеек была равна
$1500.

Магнитофон все равно не помещается, так что оценка остается неизменной.

А если емкость рюкзака увеличивается до 4 фунтов? Ага, магнитофон
наконец-то войдет в рюкзак! Старая максимальная стоимость была равна
$1500, но если вместо гитары положить магнитофон, она увеличится до $3000!
Берем магнитофон.

Оценка только что обновилась! Имея рюкзак емкостью
положить в него товары стоимостью по крайней мере
4 фунта, вы можете $3000. Из таблицы
видно, что оценка постепенно возрастает.

Ноутбук

А теперь проделаем то же для ноутбука! Ноутбук весит 3 фу нта , поэтому
он не поместится в рюкзак с емкостью 1 или 2 фунта. Оце нка для первых
двух ячеек остается на уровне 1500

Для 3 фунтов старая оценка составляла $1500. Но теп ерь вы можете вы­
брать ноутбук, который стоит $2000. Следовательно, новая максимал ьная
оценка равна $2000!

При 4 фунтах ситуация становится по-настоящему интересной . Это очень
важная часть. В настоящее время оценка составляет $3000. В рюкзак можно
положить ноутбук, но он стоит всего $2000.

Так-так, старая оценка была лучше. Но постойте! Ноутбук весит всего
3 фунта, так что 1 фунт еще свободен! На это место можно еще что-нибудь
положить

Какую максимальную стоимость можно разместить в 1 фунте? Да вы же  уже вычислили ее!

В соответствии с последней оценкой в свободном месте емкостью в 1 фунт
можщ> разместить гитару стоимостью $1500. Следовательно, настоящее
сравнение выглядит так :

Вы удивлялись, зачем мы вычисляем максимальную стоимость для рюк­
заков меньшей емкости? Надеюсь, теперь все стало на свои места! Если
в рюкзаке остается свободное место, вы можете использовать ответы на эти
подзадачи для определения того, чем заполнить это пространство. Вместо
магнитофона лучше взять ноутбук
+ гитару за $3500.

стр 216

Что произойдет при добавлении элемента?

Представьте, что вы увидели четвертый предмет, который тоже можно за­
сунуть в рюкзак! Вместе со всем предыдущим добром можно также украсть
iPhone.

Придется ли пересчитывать все заново с новым предметом? Нет. Напомню,
что динамическое программирование последовательно строит решение на
основании вашей оценки . К настоящему моменту максимальные стоимости
выглядят так :

Вопрос: может ли значение в столбце уменьшиться? Такое возможно?
Подумайте над ответом, прежде чем продолжить чтение.
Ответ: нет. При каждой итерации сохраняется текущая оценка максимума.
Эта оценка ни при каких условиях не может быть меньше предыдущей!

Что произойдет при изменении порядка строк?

Изменится ли ответ? Допустим, строки заполняются в другом порядке:
магнитофон, ноутбук, гитара. Как будет выглядеть таблица? Заполните
таблицу самостоятельно , прежде чем двигаться дальше .

Ответ не изменился. Он не зависит от порядка строк.

Можно ли заполнять таблицу по столбцам,
а не по строкам?
Попробуйте сами! В данной задаче это ни на что не влияет, но в других за­
дачах возможны изменения.

Что произойдет при добавлении меньшего элемента?
Из-за ожерелья приходится повысить точность представления весов , по­
этому таблица должна измениться.


Можно ли взять часть предмета?
Как решить такую задачу методом динамического программи­
рования?
Ответ: никак. В решении, полученном методом динамического програм­
мирования, вы либо берете предмет, либо не берете. Алгоритм не преду­
сматривает возможность взять половину предмета.

Однако проблема легко решается с помощью жадного алгоритма! Сна­
чала вы берете самый ценный предмет - настолько большую его часть,
насколько возможно. Когда самый ценный предмет будет исчерпан, вы
берете максимально возможную часть следующего по ценности предмета
ит.д .

Взаимозависимые элементы

Если вы положите Эйфелеву башню в свой «рюкзак~, то Лувр станет «де­
шевле~> - он займет всего 1 день вместо 1,5
дня. Как смоделировать это
обстоятельство в динамическом программировании?
Никак. Динамическое программирование
-
мощный метод, способный ре­
шать подзадачи и использовать полученные ответы для решения большой
задачи. Динамическое программирование работает толъко в том случае,
если каждая подзадача автономна, то естъ не зависит от других подзадач.
Из этого следует, что учесть поездки в Париж в алгоритме динамического
программирования не удастся.

Может ли оказаться, что решение требует
более двух «nодрюкзаков»?

Может оказаться, что в лучшем решении должны отбираться больше двух
элементов. В текущем варианте алгоритма объединяются не более двух
«подрюкзаков~>
-
больше двух их не бывает. Однако вполне возможно, что
у этих «подрюкзаков~ будут собственные «подрюкзаки~.

Возможно ли, что при лучшем решении в рюкзаке
остается пустое место?

например брилиант стоит больше всех нужно брать его но в рюкзаке может остаться чучуть места
не обязательно полностью его заполнять

Динамическое программирование применяется
для оптимизации какой - либо характеристики

при заданных ограничениях. В задаче о рюкзаке требуется максимизи­
ровать стоимость отобранных предметов с ограничениями по емкости
рюкзака.

Динамическое программирование работает только в ситуациях , в кото­
рых задача может быть разбита на автономные подзадачи , не зависящие
друг от друга.

Построить решение на базе динамического программирования бывает не­
просто. В этом разделе мы сосредоточимся на этой теме. Несколько общих
рекомендаций:

в каждом решении из области динамического программирования стро­
ится таблица;

значения ячеек таблицы обычно соответствуют оптимизируемой ха­
рактеристике. Для задачи о рюкзаке значения представляли общую
стоимость товаров;

каждая ячейка представляет подзадачу, поэтому вы должны подумать
о том, как разбить задачу на подзадачи. Это поможет вам определиться
с осями.

Рассмотрим еще один пример. Допустим, вы от­
крыли сайт dictionary.com. Пользователь вводит
слово, а сайт возвращает определение. Но если
пользователь ввел несуществующее слово, нуж­
но предположить, какое слово имелось в виду.
Алекс ищет определение «fish~. но он случайно
ввел 4'hish~. Такого слова в словаре нет, но зато
у вас есть список похожих слов.

Это несерьезный пример, поэтому список ограничен всего двумя словами .
Вероятно, на практике такой список будет состоять из тысяч слов

И так, Алекс ввел строку  hish. Какое
слово он хотел ввести на самом деле: fish или vista?

Построение таблицы

Как должна выглядеть таблица для этой задачи? Вы должны ответить на
следующие вопросы.
о Какие значения должны содержаться в ячейках?
о Как разбить эту задачу на подзадачи?
о Каков смысл осей таблицы?

В динамическом программировании вы пытаетесь максимизировать неко­
торую характеристику. В данном случае ищется самая длинная подстрока,
общая в двух словах. Какую общую подстроку содержат hish и fish? А как
насчет hish и vista? Именно это требуется вычислить.

Как говорилось ранее, значения в ячейках обычно представляют ту характе­
ристику, которую вы пытаетесь оптимизировать. Вероятно, в данном случае
этой характеристикой будет число: длина самой длинной подстроки , общей
для двух строк.

Динамическое программирование применяется при оптимизации не ­
которой характеристики.

Динамическое программирование работает только в ситуациях, в кото ­
рых задача может быть разбита на автономные подзадачи.

В каждом решении из области динамического программирования стро ­
ится таблица.

Значения ячеек таблицы обычно соответствуют оптимизируемой харак ­
теристике.

Каждая ячейка представляет подзадачу, поэтому вы должны подумать
о том, как разбить задачу на подзадачи.

Не существует единой формулы для вычисления решений методом ди­
намического программирования .



