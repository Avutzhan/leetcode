а что дальше?

Приводится краткий обзор 10 алгоритмов, которые не
рассматривались в книге. Вы узнаете, для чего нужны
эти алгоритмы

Я порекомендую книги, которые стоит читать дальше
в зависимости от того, какие темы представляют инте­
рес для вас.

Деревья

бинарное дерево поиска.

Существуют специальные бинарные деревья поиска, способные к самобалан­
сировке (как, например, красно-черные деревья).

Где же используются бинарные деревья поиска? В-деревья , особая разно­
видность бинарных деревьев, обычно используются для хранения инфор­
мации в базах данных.
Если вас интересуют базы данных или более сложные структуры данных,
поищите информацию по следующим темам:

в-деревья;

красно - черные деревья;

кучи;

скошенные
(splay) деревья .

Инвертированные индексы

Это очень полезная структура данных: хеш-таблица, связывающая слова
с местами, в которых эти слова встречаются. Такая структура данных, на­
зываемая инвертированным индексом, часто используется для построения
поисковых систем. Если вас интересует область поиска, эта тема станет
хорошей отправной точкой для дальнейшего изучения.

Преобразование Фурье

Работает со звуковыми сигналами можно потсроить аналог Шазама

Параллельные алгоритмы

Следующие три темы связаны с масштабируемостью и обработкой больших
объемов данных.

Чтобы алгоритм
заработал быстрее, необходимо преобразовать его в форму, подходящую
для параллельного выполнения сразу на всех ядрах!

Рассмотрим простой пример. Лучшее время выполнения для алгоритма
сортировки равно приблизительно О(п log п). Известно, что массив не­
возможно отсортировать за время О(п), если толъко не восполъзоватъся
параллельным алгоритмом!

Существует параллельная версия быстрой сор­
тировки, которая сортирует массив за время О( п ).

Параллельный алгоритм трудно разработать. И так же трудно убедиться
в том, что он работает правильно, и понять, какой прирост скорости он
обеспечивает. Одно можно заявить твердо: выигрыш по времени не линеен.
Следовательно, если процессор вашего компьютера имеет два ядра вместо
одного, из этого не следует, что ваш алгоритм по волшебству заработает
вдвое быстрее. Это объясняется несколькими причинами.

Затраты ресурсов на управление параллелизмом
отсортировать массив из 1000 - допустим, нужно
элементов. Как разбить эту задачу для
выполнения на двух ядрах? Выделить каждому ядру
500 элементов , а затем объединить два отсортированных массива в один большой отсор­
тированный массив? Слияние двух массивов требует времени.

Распределение нагрузки - допустим, необходимо выполнить 1 О задач,
и вы назначаете каждому ядру 5 задач. Однако ядру А достаются все
простые задачи, поэтому оно выполняет свою работу за 1 О секунд, тогда
как ядро В справится со сложными задачами только за минуту. Это оз­
начает, что ядро А целых 50 секунд простаивает, пока ядро В выполняет
всю работу! Как организовать равномерное распределение работы, чтобы
оба ядра трудились с одинаковой интенсивностью?

Если вас интересует теоретическая сторона производительности и мас­
штабируемости, возможно, параллельные алгоритмы именно то, что вам
нужно!

MapReduce

Одна разновидность параллельных алгоритмов в последнее время становит­
ся все более популярной: распределенные алzориrпмы. Конечно, параллель­
ный алгоритм удобно запустить на компьютере, если для его выполнения
потребуется от двух до четырех ядер, а если нужны сотни ядер? Тогда ал­
горитм записывается так, чтобы он мог выполняться на множестве машин.
Алгоритм MapReduce - известный представитель семейства распределен­
ных алгоритмов. Для работы с ним можно воспользоваться популярной
системой с открытым кодом
Apache Hadoop.

Для чего нужны распределенные алгоритмы?

Предположим, имеется таблица с миллиардами или триллионами запи­
сей и вы хотите применить к ней сложный вопрос SQL.
Используйте MapReduce через Hadoop!

В основе технологии MapReduce лежат две простые идеи :
функция отображения map и функция свертки reduce.

Функция map

Функция map проста: она получает массив и применяет одну функцию
к каждому элементу массива.

Функция reduce

Функция reduce иногда сбивает людей с толку.Идея заключается в том, что
весь список элементов «сокращается~ до одного элемента. Напомню, что
функция map переходит от одного массива к другому.

С функцией reduce массив преобразуется в один элемент.
MapReduce использует эти две простые концепции для выполнения запро­
сов на нескольких машинах. При использовании большого набора данных
(миллиарды записей) MapReduce выдаст ответ за минуты, тогда как тра­
диционной базе данных на это потребуются многие часы.

Фильтры Блума и Hyperloglog

Во всех этих примерах возникает одна проблема . Имеется очень большой
набор данных.
Появляется новый объект, и вы хотите узнать, содержится ли он в суще­
ствующем наборе.
Эта задача быстро решается при помощи хеша.
Вот только этот хеш получится просто огромным Google индексирует трил­
лионы веб-страниц.

Сталкиваясь с такими объемами данных, приходится
действовать более изобретательно!

Фильтры Блума

Для решения проблемы можно воспользоваться вероятностными струк­
турами данных, которые называются фильтрами Блума

Они дают ответ,
который может оказаться ложным, но с большой вероятностью является
правильным.
Вместо того чтобы обращаться к хешу, вы спрашиваете
у фильтра Блума, обрабатывался ли этот URL-aдpec ранее. Хеш-таблица
даст точный ответ. Фильтр Блума дает ответ, правильный с высокой ве­
роятностью:

возможны ложно-положительные срабатывания. Фильтр скажет: ~этот
сайт уже обрабатывался», хотя этого не было;

ложно-отрицательные срабатывания исключены. Если фильтр утверж-
дает, что сайт не обрабатывался, вы можете быть в этом уверены.

HyperLog Log

Примерно так же действует другой алгоритм, который называется  HyperLog Log

HyperLogLog аппроксимирует количество уникальных элементов
в множестве. Как и фильтры Блума, он не дает точного ответа, но выдает достаточно
близкий результат с использованием малой части памяти, которую обычно
занимает такая задача.
Если вы используете большие объемы данных и вас устраивают прибли­
женные ответы воспользуйтесь вероятностными алгоритмами!

Алгоритмы SHA

Хеширование позволяет выполнять поиск с постоянным временем . Когда
вам потребуется узнать значение, связанное с ключом , вы снова применя­
ете хеш - функцию, и она за время 0(1) сообщает, какую позицию следует
пров е рить .
Хеш-фу нкция должна обеспечивать достаточно равномерное распреде ­
ление. Итак , хе ш-функция получает строку и воз вращает номер ячейки,
соответствующи й этой строке.

Сравнение файлов

Одн у из раз новид ностей хеш-функций составляет ал горитм SHA (Secure Hash Algorithш) .
Он получает строку и воз вращает хеш-код этой строки.
Алгоритм SHA позволяет определить, совпадают ли два файла.
проверяем ихние хэш коды

Проверка паролей

В настоящее время ~золо­
тым стандартом~ хеширования паролей считается функция bcrypt (хотя
идеальной защиты не бывает).


Локально-чувствительное хеширование
У хеширования SHA есть еще одна важная особенность: оно является
л01шлыю-нечувствuтельным.

Иногда требуется обратный результат: локально-чувствительная функция
хеширования. Здесь на помощь приходит алгоритм
тельном изменении строки Simhash.
Simhash генерирует хеш-код,
При незначи­ который почти не
отличается от исходного. Это позволяет сравнивать хеш-коды и определять,
насколько похожи две строки, весьма полезная возможность!
Simhash используется для
выявления сходства между фрагментами текста.

Обмен ключами Диффи-Хеллмана

Алгоритм Диффи-Хеллмана заслуживает упоминания, потому что он
изящно решает давно известную задачу. Как зашифровать сообщение
так, чтобы его мог прочитать только тот человек, которому адресовано
сообщение?

з нание шифра обеими сторонами не обязател ьно. Следовательно, им не
придется встречаться и согласовывать шифр;

расшифровать зашифрованные сообщения чрезвычайно сложно.

Алгоритм Диффи- Хеллмана продолжает применяться на практике вместе
с его наследником RSA. Если вы интересуетесь криптографией, алгоритм
Диффи-Хеллмана станет хорошей отправной точкой: он элегантен и не
особо сложен.

Линейное программирование

Самое лучшее я приберег напоследок. Линейное программирование
- одна из самых интересных областей, которые мне известны.

Линейное программирование используется для максимизации некоторой
характеристики при заданных ограничениях.

Все алгоритмы, работающие с графами, могут быть реализованы средствами линейного
программирования. Линейное программирование
- намного более общая область, а задачи с графами составляют ее подмножество.

В линейном программировании используется симплекс-метод. Этот ал­
горитм достаточно сложен, поэтому я не привожу его в книге. Если вы
интересуетесь задачами оптимизации, поищите информацию о линейном
программировании!



























